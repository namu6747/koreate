package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import util.SearchCriteria;
import utils.DBCPUtil;
import utils.PageMaker;
import vo.NoticeVO;

public class NoticeDAOImpl implements NoticeDAO {
	
	Connection conn;
	PreparedStatement pstmt;
	ResultSet rs;
	

	@Override
	public boolean noticeWrite(NoticeVO noticeVO) {
		boolean isSuccess = false;
		
		conn = DBCPUtil.getConnection();
		String sql = "INSERT INTO notice_board VALUES(null,?,?,?,?,now())";
		
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, noticeVO.getNotice_category());
			pstmt.setString(2, noticeVO.getNotice_author());
			pstmt.setString(3, noticeVO.getNotice_title());
			pstmt.setString(4, noticeVO.getNotice_content());
			int result = pstmt.executeUpdate();
			if(result != 0) {
				isSuccess = true;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			DBCPUtil.close(pstmt,conn);
		}
		return isSuccess;
	}

	@Override
	public int getListCount() {
		int listCount = 0;
		try {
			conn = DBCPUtil.getConnection();
			pstmt = conn.prepareStatement(
				"SELECT count(*) FROM notice_board"
			);
			rs = pstmt.executeQuery();
			if(rs.next()) {
				listCount = rs.getInt(1);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBCPUtil.close(rs,pstmt,conn);
		}
		return listCount;
	}

	@Override
	public ArrayList<NoticeVO> noticeList(int startRow, int endRow) {
		ArrayList<NoticeVO> noticeList = new ArrayList<>();
		String sql = "SELECT * FROM notice_board ORDER BY notice_num DESC limit ? , ?";
		try {
			conn = DBCPUtil.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, startRow);
			pstmt.setInt(2, endRow);
			rs = pstmt.executeQuery();
			while(rs.next()) {
				NoticeVO n = new NoticeVO(
					rs.getInt(1),
					rs.getString(2),
					rs.getString(3),
					rs.getString(4),
					rs.getString(5),
					rs.getTimestamp(6)
				);
				noticeList.add(n);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			DBCPUtil.close(rs,pstmt,conn);
		}
		return noticeList;
	}
	
	@Override
	public int getSearchListCount(String searchName, String searchValue) {
		int listCount = 0;
		
		conn = DBCPUtil.getConnection();
		
		String sql = "SELECT count(*) FROM notice_board ";
		
		try {
			if(searchValue == null) searchValue = "";
			if(searchName == null
					|| 
				searchName.trim().equals("") 
					|| 
				searchName.trim().equals("null")) {
				System.out.println("검색 내용이 없음");
				pstmt = conn.prepareStatement(sql);
			}else {
				if(searchName.equals("author")) {
					sql += " WHERE notice_author LIKE CONCAT('%',?,'%')";
				}else if(searchName.equals("title")) {
					sql += " WHERE notice_title LIKE CONCAT('%',?,'%')";
				}
				pstmt = conn.prepareStatement(sql);
				pstmt.setString(1, searchValue);
			}
			rs = pstmt.executeQuery();
			if(rs.next()) {
				listCount = rs.getInt(1);
			}
			System.out.println("search Query : " + sql);
			System.out.println("listCount : " + listCount);
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBCPUtil.close(rs,pstmt,conn);
		}
		return listCount;
	}
	
	@Override
	public ArrayList<NoticeVO> getSearchList(PageMaker pageMaker) {
		ArrayList<NoticeVO> noticeList = new ArrayList<>();
		SearchCriteria cri = pageMaker.getSearchCriteria();
		System.out.println(cri);
		
		if(cri != null && cri.getSearchName() == null) { 
			cri.setSearchValue("");
		}
		
		conn = DBCPUtil.getConnection();
		
		String sql = "SELECT * FROM notice_board ";
		boolean isSearchQuery = true;
		
		if(cri.getSearchName() == null 
				|| 
		   cri.getSearchName().trim().equals("")
		   		|| 
		   cri.getSearchName().trim().equals("null")) {
			System.out.println("검색 내용 없음");
			isSearchQuery = false;
		}else {
			if(cri.getSearchName().equals("author")) {
				sql += " WHERE notice_author LIKE ? ";
			}else if(cri.getSearchName().equals("title")) {
				sql += " WHERE notice_title LIKE ? ";
			}
		}
		sql += " ORDER BY notice_num DESC limit ?, ?";
		System.out.println("getSearchList : " + sql +" is : " + isSearchQuery);
		
		try {
			pstmt = conn.prepareStatement(sql);
			if(isSearchQuery) {
				pstmt.setString(1, "%"+cri.getSearchValue()+"%");
				pstmt.setInt(2, cri.getStartPage());
				pstmt.setInt(3, cri.getPerPageNum());
			}else {
				pstmt.setInt(1, cri.getStartPage());
				pstmt.setInt(2, cri.getPerPageNum());
			}
			rs = pstmt.executeQuery();
			while(rs.next()) {
				NoticeVO n = new NoticeVO(
					rs.getInt(1),
					rs.getString(2),
					rs.getString(3),
					rs.getString(4),
					rs.getString(5),
					rs.getTimestamp(6)
				);
				noticeList.add(n);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBCPUtil.close(rs,pstmt,conn);
		}
		return noticeList;
	}

	@Override
	public NoticeVO noticeDetail(int notice_num) {
		NoticeVO notice = null;
		
		try {
			String sql = "SELECT * FROM notice_board WHERE notice_num = "+notice_num;
			conn = DBCPUtil.getConnection();
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();
			if(rs.next()) {
				notice = new NoticeVO(
					rs.getInt(1),
					rs.getString(2),
					rs.getString(3),
					rs.getString(4),
					rs.getString(5),
					rs.getTimestamp(6)
				);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			DBCPUtil.close(rs,pstmt,conn);
		}
		return notice;
	}

	@Override
	public boolean noticeUpdate(NoticeVO noticeVO) {
		boolean isSuccess = false;
		
		String sql = "UPDATE notice_board SET "
					+ " notice_category = ? , "
					+ " notice_author = ? , "
					+ " notice_title = ? , "
					+ " notice_content = ? , "
					+ " notice_date = now() "
					+ " WHERE notice_num = ? ";
		
		try {
			conn = DBCPUtil.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, noticeVO.getNotice_category());
			pstmt.setString(2, noticeVO.getNotice_author());
			pstmt.setString(3, noticeVO.getNotice_title());
			pstmt.setString(4, noticeVO.getNotice_content());
			pstmt.setInt(5, noticeVO.getNotice_num());
			int result = pstmt.executeUpdate();
			if(result != 0) {isSuccess = true;}
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			DBCPUtil.close(pstmt,conn);
		}
		return isSuccess;
	}

	@Override
	public boolean noticeDelete(int notice_num) {
		boolean isSuccess = false;
		try {
			String sql = "DELETE FROM notice_board WHERE notice_num = ? ";
			conn = DBCPUtil.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, notice_num);
			int result = pstmt.executeUpdate();
			if(result != 0) {
				isSuccess = true;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			DBCPUtil.close(pstmt,conn);
		}
		return isSuccess;
	}
}
